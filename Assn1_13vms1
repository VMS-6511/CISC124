import java.util.Random;
import java.util.Scanner;
/* Name: Vinith Suriyakumar Student Number: 10137764 
   This program follows the format of the Game of Pig. It consists
   of a player and a computer. The game involves rolling two dice
   whose sum are added each turn to a total sum until one of the
   player's reaches a sum of 100. The player's always have the option
   to roll again or hold after their first roll. There are also specific
   dice events that result in a turn sum of 0, player game sum of 0 and
   a roll again.*/
public class Assn1_13vms1 {
	
	// This scanner object is used for all of the input in the program
	// Currently thinking of using only System.in for efficiency
	// Declared as an attribute so that the object does not have to be
	// initialized in each method
	final static Scanner KEYBOARD = new Scanner(System.in);
	// This random object is used to generate a random object based
	// a seed that uses the millisecond of the current time.
	// It is a class attribute so that the generator can be used 
	// across each of the methods
	final static Random GENERATOR = new Random(System.currentTimeMillis());
	
	//This method returns a random integer from 1 to 6 inclusive that represents the rolling of the dice.
	// The assumptions made are that the dice only has numbers 1 to 6
	// No parameters are required for the method
	public static int rollDice(){
		 return GENERATOR.nextInt(6)+1;
	} // end rollDice method
	
	// This method prints out the two numbers that the player rolled and takes in
	// a parameter of String type that indicates who the current player is. This
	// allows the method to be used for both the computer and the player.
	// The assumptions made are that the rollDice() function will always output
	// a number from 1 to 6. 
	public static int[] printDiceRolls(String currentRoller){
		int[] diceRolls = new int[2];
		String[] diceRollsWords = new String[2];
		// Rolls the dice twice so that the player has two values
		diceRolls[0] = rollDice();
		diceRolls[1] = rollDice();
		// Determines which numerical words need to be used to describe each of the dice rolls the player and computer
		// received.
		for (int i = 0; i < diceRolls.length;i++){
			switch(diceRolls[i]){
			case 1: diceRollsWords[i] = "one";
					break;
			case 2: diceRollsWords[i] = "two";
					break;
			case 3: diceRollsWords[i] = "three";
					break;
			case 4: diceRollsWords[i] = "four";
					break;
			case 5: diceRollsWords[i] = "five";
					break;
			case 6: diceRollsWords[i] = "six";
					break;
			}
		}
		System.out.println(currentRoller + " rolled " + diceRollsWords[0] + " + " + diceRollsWords[1]);
		return diceRolls;
	} // end printDiceRolls method
	
	// This method takes four parameters which are the two numbers rolled by the player, the player's current
	// sum for that turn and their sum for the entire game. Finally, it also takes a parameter that indicates
	// who's current turn it is as a String so that the method can be used for both the player and the computer.
	// The method produces the output for the four different possible events based on the numbers rolled by that player.
	// It returns an integer based on the dice pair event so that the current turn sum and game sum of the player can
	// be changed if needed. 
	public static int dicePairEvents(int[] diceRolls, int turnSum, int playerGameSum, String diceEventsPrompt){

		if(diceRolls[0] == 1 && diceRolls[1] == 1){
			System.out.println("Two ones were rolled! " + diceEventsPrompt.toUpperCase() +" TURN IS OVER! Game sum is now zero!");
			return 1;
		}

		else if(diceRolls[0] == 1 || diceRolls[1] == 1){
			System.out.println( "Turn sum is now zero! " + diceEventsPrompt.toUpperCase() +" TURN IS OVER! Game sum is currently: " + playerGameSum);
			return 2;
		}

		else if(diceRolls[0] == diceRolls[1]){
			System.out.println(diceEventsPrompt +" turn sum is: " + turnSum + " and game sum is: " + (playerGameSum + turnSum));
			System.out.println("ROLL AGAIN!");
			return 3;
		}

		else{
			System.out.println(diceEventsPrompt +" turn sum is: " + turnSum + " and game sum is: " + (playerGameSum + turnSum));
			return 4;
		}

	} // end dicePairEvents
	
	//This method is for returning the boolean to decide whether the player 
	//would like to roll the dice again or pass to the next turn. 
	//There are no parameters passed to the method.
	public static boolean rollAgain(){
		boolean incorrectInput = true;
		boolean replay = true;
		
		// This do while loop takes care of the scenario where the user may input a letter
		// that is not y or n or any other data type.
		do{
			// This try catch block is used to take care of the error that is caused in the case
			// the user presses enter by accident instead of entering a letter. 
			try{
				System.out.println("Would you like to roll again? (y or n)");
				char rollAgain = KEYBOARD.nextLine().charAt(0);

				if (rollAgain == 'y' || rollAgain == 'Y'){
					incorrectInput = false;
				}
				else if(rollAgain == 'n' || rollAgain == 'N'){
					replay = false;
					incorrectInput = false;
				}
				else{
					System.out.println("Please enter one of the characters specified.");
					incorrectInput = true;
				}
				
			}catch(StringIndexOutOfBoundsException e){
					System.out.println("Please try again using one of the specified characters!");
					incorrectInput = true;
				}
		}while(incorrectInput);
		
		return replay;	
	} // end rollAgain method

	// This method runs through the operations required for the user's turn in the game and
	// returns the game sum after their turn so that it can accumulate over the course of the
	// game. This need for accumulation across the turns is also why the game sum is passed
	// as a parameter.
	public static int playerTurn(int playerGameSum){
		int turnSum = 0;
		boolean replay = true;
		int diceEvent;
		int totalTurnSum = 0;
		String currentRoller = "Player";
		String diceEventsPrompt = "Your";
		System.out.println("Player's Turn:\n");
		//Loops until the player decides they do not want to roll again or if they roll
		//a dice pair that results in a termination of their turn.
		while(replay){
			int[] diceRolls = printDiceRolls(currentRoller);
			turnSum = diceRolls[0] + diceRolls[1];
			totalTurnSum = totalTurnSum + turnSum;
			diceEvent = dicePairEvents(diceRolls, totalTurnSum, playerGameSum, diceEventsPrompt);
			// These four if statements take the integer representing one of the four dice events
			// from the event deciding method and alters the game sum, turn sum, and decides 
			// whether the player is able to roll the dice again.
			if(diceEvent == 1){
				playerGameSum = 0;
				totalTurnSum = 0;
				replay = false;
			}
			else if (diceEvent == 2){
				totalTurnSum = 0;
				replay = false;
			}
			else if (diceEvent == 3)
				replay = true;

			else if (diceEvent == 4)
				replay = rollAgain();
		}
		return (playerGameSum+totalTurnSum);
	} // end playerTurn method
	
	// This method is the computer's strategy for whether it will roll the dice again or not
	// during it's turn. I have implemented a strategy where if their entire game sum is less
	// than 40 and their current turn sum is less than 20, then they should roll again. Otherwise
	// I said that the computer will decide to hold. Thus, it takes in two integer parameters:
	// one being the computer's turn sum and the other being their game sum.
	public static boolean computerStrategy(int turnSum, int computerGameSum){
		boolean replay = false;
		if (computerGameSum > 40 && turnSum > 20)
			replay = false;
		else if (computerGameSum <= 40 && turnSum <= 20)
			replay = true;
		return replay;
	} // end computerStrategy method
	
	// This method runs through the operations required for the computer's turn in the game and
	// returns the game sum after their turn so that it can accumulate over the course of the
	// game. This need for accumulation across the turns is also why the game sum is passed
	// as a parameter.
	public static int computerTurn(int computerGameSum){
		int turnSum = 0;
		boolean replay = true;
		int diceEvent;
		int totalTurnSum = 0;
		String currentRoller = "Computer";
		String diceEventsPrompt = "Computer's";
		System.out.println("Computer's Turn:");
		
		//Loops until the computer decides they do not want to roll again or if they roll
		//a dice pair that results in a termination of their turn.
		while(replay){
			System.out.print("\n");
			int[] diceRolls = printDiceRolls(currentRoller);
			turnSum =  diceRolls[0] + diceRolls[1];
			totalTurnSum = totalTurnSum + turnSum;
			diceEvent = dicePairEvents(diceRolls, totalTurnSum, computerGameSum, diceEventsPrompt);
			if(diceEvent == 1){
				computerGameSum = 0;
				totalTurnSum = 0;
				replay = false;
			}
			else if (diceEvent == 2){
				totalTurnSum = 0;
				replay = false;
			}
			else if (diceEvent == 3)
				replay = true;
			else if (diceEvent == 4)
				replay = computerStrategy(turnSum, computerGameSum);
		}
		return (computerGameSum + totalTurnSum);
	} // end of computerTurn method
	
	// This method prints out the message indicating when someone has reached 100 and
	// shows what their final score was compared to the loser of the game. The two
	// parameters that must be taken are the playerGameSum and the computerGameSum so
	// that the winner can be decided.
	public static void winningMessage(int playerGameSum, int computerGameSum){
		if (playerGameSum >= 100)
			System.out.println("You won the game with a final score of " + playerGameSum + " ! Congratulations!");
		else if (computerGameSum >= 100)
			System.out.println("The computer won the game with a final score of " + computerGameSum + " ! Congratulations!");		
	}
	
	// This method allows the user to decide whether they would like to restart the game
	// once someone has one the first iteration of the game. No parameters are required and
	// the method returns a boolean indicating whether the player would like to restart the game
	// or not. 
	public static boolean restartGame(){
		boolean incorrectInput;
		boolean restart = false;
		
		// This do while loop ensures that any errors that could arise from different
		// user input are accounted for. If the user does not enter a letter other than
		// the specified ones, they will be prompted to try entering another letter again. 
		do{
			System.out.println("Would you like to play again? (y or n)");
			String Again = KEYBOARD.nextLine();
			KEYBOARD.nextLine(); // This is needed to clear the keyboard buffer.
			if(Again.toLowerCase().equals("y")){
				restart = true;
				incorrectInput = false;
			}
			else if(Again.toLowerCase().equals("n")){
				incorrectInput = false;
			}
			else{
				System.out.println("Please enter one of the specified characters.\n");
				incorrectInput = true;
			}
		}while(incorrectInput);
		return restart;
	} // end of restartGame method
	
	// This method runs all of the required methods to run the entire game.
	public static void playGame(){
		//These three lines are just present indicate the start of the game to the user.
		System.out.println("WELCOME TO THE GAME OF PIG!");
		System.out.println("\nThe player will start the game first! Enjoy!\n");
		System.out.println("---------------------------------------------------\n");
		boolean restartGameDecision;
		// This do while loop runs until the user decides they would like to stop playing the game.
		do{
			int playerGameSum = 0;
			int computerGameSum = 0;
			
			// This while loops executes until one of the players reaches a game sum of 100 or more.
			while(playerGameSum <100 && computerGameSum <100){
				playerGameSum = playerTurn(playerGameSum);
				System.out.println("\nPlayer's sum is: " + playerGameSum +", Computer's sum is: " + computerGameSum +", Please press <enter> or any key to continue the game.");
				KEYBOARD.nextLine(); // clears the keyboard buffer and takes in enter press
				if(playerGameSum<100)
					computerGameSum = computerTurn(computerGameSum);
					System.out.println("\nPlayer's sum is: " + playerGameSum +", Computer's sum is: " + computerGameSum +", Please press <enter> or any key to continue the game.");
					KEYBOARD.nextLine(); // clears the keyboard buffer and takes in enter press
			}
			winningMessage(playerGameSum, computerGameSum);
			restartGameDecision = restartGame();
		}while(restartGameDecision);
		KEYBOARD.close();// closes the scanner object
	} // end of the playGame method
	
	// This method is the main and executes the program.
	public static void main(String[] args) {
		playGame();
		System.exit(0); // closes the program after the user decides to stop playing
	} // end of the main method
} // end of Assn1_13vms1 class
